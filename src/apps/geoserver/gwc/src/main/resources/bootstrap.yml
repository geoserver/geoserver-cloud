gwc:
  enabled: true
  cache-directory: ${GEOWEBCACHE_CACHE_DIR:${geoserver.backend.data-directory.location}/gwc}
  rest-config: true
  web-ui: true
  services:
    wmts: true
    tms: true
    wms: true
    kml: false
    gmaps: false
    mgmaps: false
  disk-quota:
    enabled: false

# gwc.context.suffix is used by gwc rest controllers
# (e.g. @RequestMapping(path = "${gwc.context.suffix:}/rest"))
# and usually loaded from gs-gwc.jar's application.properties.
# This won't be the case since we declare spring.config.name=geoserver
gwc.context.suffix: gwc
geoserver.base-path: /gwc

info:
  component: GeoWebcache
  instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}}
server:
  port: 8080
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  servlet:
    context-path: /
    session:
      tracking-modes: COOKIE
      cookie:
        name: JSESSIONID_${spring.application.name}
        http-only: true
management.server.port: 8081
spring:
  config:
    import:
# import definition of common bootstrap configuration profiles    
    - classpath:gs_cloud_bootstrap_profiles.yml
# load externalized configuration from geoserver.yml
    name: geoserver 
# and always include the service specific settings from the profile
  profiles.include: gwc_service 
# also ask for geoserver.yml when loading the externalized config through a config-server
  cloud.config.name: geoserver
  main:
    banner-mode: off
    allow-bean-definition-overriding: true
    allow-circular-references: true # false by default since spring-boot 2.6.0, breaks geoserver initialization
    web-application-type: servlet
  application:
    name: gwc-service
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration
      - org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration
      - org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration

# override default of true, this service does not use the registry (when eureka client is enabled)
eureka.client.fetch-registry: false

---
# local profile, used for development only. Other settings like config and eureka urls in gs_cloud_bootstrap_profiles.yml
spring.config.activate.on-profile: local
server.port: 9107
management.server.port: 8107
