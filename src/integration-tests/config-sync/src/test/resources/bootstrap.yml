info:
  component: Integration Tests Application
  instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}}

management.server.port: 0
server:
  port: 0
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  servlet.context-path: /
  error:
    include-message: always
    include-binding-errors: always
    whitelabel:
      enabled: true

spring:
  config:
    import:
# import definition of common bootstrap configuration profiles    
    - classpath:gs_cloud_bootstrap_profiles.yml
# load externalized configuration from geoserver.yml
    name: geoserver 
# and always include the service specific settings from the profile
  profiles.include: it_service
# also ask for geoserver.yml when loading the externalized config through a config-server
  cloud.config.name: geoserver
  main:
    banner-mode: off
    allow-bean-definition-overriding: true
    allow-circular-references: true # false by default since spring-boot 2.6.0, breaks geoserver initialization
    web-application-type: none
  application:
    name: it-service
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration
      - org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration

# override default of true, this service does not use the registry (when eureka client is enabled)
eureka.client.fetch-registry: false

logging.level:
    '[org.springframework.retry]': debug
